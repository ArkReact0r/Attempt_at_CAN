
Blinnk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002680  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002804  08002804  00012804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002814  08002814  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002814  08002814  00012814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800281c  0800281c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800281c  0800281c  0001281c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002820  08002820  00012820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  08002830  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  08002830  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005fe2  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015c5  00000000  00000000  0002605a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000610  00000000  00000000  00027620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000470  00000000  00000000  00027c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e232  00000000  00000000  000280a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006ba3  00000000  00000000  000462d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6a4a  00000000  00000000  0004ce75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001778  00000000  00000000  001038c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003c  00000000  00000000  00105038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080027ec 	.word	0x080027ec

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080027ec 	.word	0x080027ec

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b972 	b.w	80004c0 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14c      	bne.n	800029e <__udivmoddi4+0xaa>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d967      	bls.n	80002da <__udivmoddi4+0xe6>
 800020a:	fab2 f382 	clz	r3, r2
 800020e:	b153      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000210:	fa02 fc03 	lsl.w	ip, r2, r3
 8000214:	f1c3 0220 	rsb	r2, r3, #32
 8000218:	fa01 fe03 	lsl.w	lr, r1, r3
 800021c:	fa20 f202 	lsr.w	r2, r0, r2
 8000220:	ea42 0e0e 	orr.w	lr, r2, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fbbe f1f7 	udiv	r1, lr, r7
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fb07 ee11 	mls	lr, r7, r1, lr
 8000236:	fb01 f005 	mul.w	r0, r1, r5
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 3eff 	add.w	lr, r1, #4294967295
 800024c:	f080 8119 	bcs.w	8000482 <__udivmoddi4+0x28e>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8116 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000260:	fb07 2210 	mls	r2, r7, r0, r2
 8000264:	fb00 f505 	mul.w	r5, r0, r5
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8104 	bcs.w	8000486 <__udivmoddi4+0x292>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8101 	bls.w	8000486 <__udivmoddi4+0x292>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	2100      	movs	r1, #0
 800028e:	1b64      	subs	r4, r4, r5
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa6>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xc0>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ea 	beq.w	800047c <__udivmoddi4+0x288>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d148      	bne.n	800034e <__udivmoddi4+0x15a>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xd2>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2c2>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4696      	mov	lr, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa6>
 80002d4:	e9c6 4e00 	strd	r4, lr, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa6>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xea>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 808e 	bne.w	8000404 <__udivmoddi4+0x210>
 80002e8:	1a88      	subs	r0, r1, r2
 80002ea:	2101      	movs	r1, #1
 80002ec:	0c17      	lsrs	r7, r2, #16
 80002ee:	fa1f fe82 	uxth.w	lr, r2
 80002f2:	fbb0 f5f7 	udiv	r5, r0, r7
 80002f6:	fb07 0015 	mls	r0, r7, r5, r0
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000300:	fb0e f005 	mul.w	r0, lr, r5
 8000304:	4290      	cmp	r0, r2
 8000306:	d908      	bls.n	800031a <__udivmoddi4+0x126>
 8000308:	eb1c 0202 	adds.w	r2, ip, r2
 800030c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000310:	d202      	bcs.n	8000318 <__udivmoddi4+0x124>
 8000312:	4290      	cmp	r0, r2
 8000314:	f200 80cc 	bhi.w	80004b0 <__udivmoddi4+0x2bc>
 8000318:	4645      	mov	r5, r8
 800031a:	1a12      	subs	r2, r2, r0
 800031c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000320:	fb07 2210 	mls	r2, r7, r0, r2
 8000324:	fb0e fe00 	mul.w	lr, lr, r0
 8000328:	b2a4      	uxth	r4, r4
 800032a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032e:	45a6      	cmp	lr, r4
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x150>
 8000332:	eb1c 0404 	adds.w	r4, ip, r4
 8000336:	f100 32ff 	add.w	r2, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14e>
 800033c:	45a6      	cmp	lr, r4
 800033e:	f200 80b4 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 8000342:	4610      	mov	r0, r2
 8000344:	eba4 040e 	sub.w	r4, r4, lr
 8000348:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034c:	e7a0      	b.n	8000290 <__udivmoddi4+0x9c>
 800034e:	f1c1 0720 	rsb	r7, r1, #32
 8000352:	408b      	lsls	r3, r1
 8000354:	fa22 fc07 	lsr.w	ip, r2, r7
 8000358:	ea4c 0c03 	orr.w	ip, ip, r3
 800035c:	fa25 fa07 	lsr.w	sl, r5, r7
 8000360:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000364:	fbba f8f9 	udiv	r8, sl, r9
 8000368:	408d      	lsls	r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	432b      	orrs	r3, r5
 8000378:	fa00 f501 	lsl.w	r5, r0, r1
 800037c:	fb08 f00e 	mul.w	r0, r8, lr
 8000380:	0c1c      	lsrs	r4, r3, #16
 8000382:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000386:	42a0      	cmp	r0, r4
 8000388:	fa02 f201 	lsl.w	r2, r2, r1
 800038c:	d90b      	bls.n	80003a6 <__udivmoddi4+0x1b2>
 800038e:	eb1c 0404 	adds.w	r4, ip, r4
 8000392:	f108 3aff 	add.w	sl, r8, #4294967295
 8000396:	f080 8086 	bcs.w	80004a6 <__udivmoddi4+0x2b2>
 800039a:	42a0      	cmp	r0, r4
 800039c:	f240 8083 	bls.w	80004a6 <__udivmoddi4+0x2b2>
 80003a0:	f1a8 0802 	sub.w	r8, r8, #2
 80003a4:	4464      	add	r4, ip
 80003a6:	1a24      	subs	r4, r4, r0
 80003a8:	b298      	uxth	r0, r3
 80003aa:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ae:	fb09 4413 	mls	r4, r9, r3, r4
 80003b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80003b6:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80003ba:	45a6      	cmp	lr, r4
 80003bc:	d908      	bls.n	80003d0 <__udivmoddi4+0x1dc>
 80003be:	eb1c 0404 	adds.w	r4, ip, r4
 80003c2:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c6:	d26a      	bcs.n	800049e <__udivmoddi4+0x2aa>
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d968      	bls.n	800049e <__udivmoddi4+0x2aa>
 80003cc:	3b02      	subs	r3, #2
 80003ce:	4464      	add	r4, ip
 80003d0:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003d4:	fba0 9302 	umull	r9, r3, r0, r2
 80003d8:	eba4 040e 	sub.w	r4, r4, lr
 80003dc:	429c      	cmp	r4, r3
 80003de:	46c8      	mov	r8, r9
 80003e0:	469e      	mov	lr, r3
 80003e2:	d354      	bcc.n	800048e <__udivmoddi4+0x29a>
 80003e4:	d051      	beq.n	800048a <__udivmoddi4+0x296>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d067      	beq.n	80004ba <__udivmoddi4+0x2c6>
 80003ea:	ebb5 0308 	subs.w	r3, r5, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	40cb      	lsrs	r3, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e74a      	b.n	800029a <__udivmoddi4+0xa6>
 8000404:	fa02 fc03 	lsl.w	ip, r2, r3
 8000408:	f1c3 0020 	rsb	r0, r3, #32
 800040c:	40c1      	lsrs	r1, r0
 800040e:	409d      	lsls	r5, r3
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000418:	4328      	orrs	r0, r5
 800041a:	fbb1 f5f7 	udiv	r5, r1, r7
 800041e:	fb07 1115 	mls	r1, r7, r5, r1
 8000422:	fa1f fe8c 	uxth.w	lr, ip
 8000426:	0c02      	lsrs	r2, r0, #16
 8000428:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800042c:	fb05 f10e 	mul.w	r1, r5, lr
 8000430:	4291      	cmp	r1, r2
 8000432:	fa04 f403 	lsl.w	r4, r4, r3
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x256>
 8000438:	eb1c 0202 	adds.w	r2, ip, r2
 800043c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000440:	d22f      	bcs.n	80004a2 <__udivmoddi4+0x2ae>
 8000442:	4291      	cmp	r1, r2
 8000444:	d92d      	bls.n	80004a2 <__udivmoddi4+0x2ae>
 8000446:	3d02      	subs	r5, #2
 8000448:	4462      	add	r2, ip
 800044a:	1a52      	subs	r2, r2, r1
 800044c:	fbb2 f1f7 	udiv	r1, r2, r7
 8000450:	fb07 2211 	mls	r2, r7, r1, r2
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800045a:	fb01 f20e 	mul.w	r2, r1, lr
 800045e:	4282      	cmp	r2, r0
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x280>
 8000462:	eb1c 0000 	adds.w	r0, ip, r0
 8000466:	f101 38ff 	add.w	r8, r1, #4294967295
 800046a:	d216      	bcs.n	800049a <__udivmoddi4+0x2a6>
 800046c:	4282      	cmp	r2, r0
 800046e:	d914      	bls.n	800049a <__udivmoddi4+0x2a6>
 8000470:	3902      	subs	r1, #2
 8000472:	4460      	add	r0, ip
 8000474:	1a80      	subs	r0, r0, r2
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	e73a      	b.n	80002f2 <__udivmoddi4+0xfe>
 800047c:	4631      	mov	r1, r6
 800047e:	4630      	mov	r0, r6
 8000480:	e70b      	b.n	800029a <__udivmoddi4+0xa6>
 8000482:	4671      	mov	r1, lr
 8000484:	e6e9      	b.n	800025a <__udivmoddi4+0x66>
 8000486:	4610      	mov	r0, r2
 8000488:	e6fe      	b.n	8000288 <__udivmoddi4+0x94>
 800048a:	454d      	cmp	r5, r9
 800048c:	d2ab      	bcs.n	80003e6 <__udivmoddi4+0x1f2>
 800048e:	ebb9 0802 	subs.w	r8, r9, r2
 8000492:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000496:	3801      	subs	r0, #1
 8000498:	e7a5      	b.n	80003e6 <__udivmoddi4+0x1f2>
 800049a:	4641      	mov	r1, r8
 800049c:	e7ea      	b.n	8000474 <__udivmoddi4+0x280>
 800049e:	4603      	mov	r3, r0
 80004a0:	e796      	b.n	80003d0 <__udivmoddi4+0x1dc>
 80004a2:	4645      	mov	r5, r8
 80004a4:	e7d1      	b.n	800044a <__udivmoddi4+0x256>
 80004a6:	46d0      	mov	r8, sl
 80004a8:	e77d      	b.n	80003a6 <__udivmoddi4+0x1b2>
 80004aa:	4464      	add	r4, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e749      	b.n	8000344 <__udivmoddi4+0x150>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e731      	b.n	800031a <__udivmoddi4+0x126>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xdc>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e6ed      	b.n	800029a <__udivmoddi4+0xa6>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_CAN_RxFifo0MsgPendingCallback>:

uint8_t check=0;
uint8_t count = 0;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan1)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan1, CAN_RX_FIFO0, &RxHeader1, RxData1);
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 80004d0:	2100      	movs	r1, #0
 80004d2:	6878      	ldr	r0, [r7, #4]
 80004d4:	f000 fed5 	bl	8001282 <HAL_CAN_GetRxMessage>
	count++;
 80004d8:	4b06      	ldr	r3, [pc, #24]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	3301      	adds	r3, #1
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	4b04      	ldr	r3, [pc, #16]	; (80004f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80004e2:	701a      	strb	r2, [r3, #0]
//	  if (HAL_CAN_AddTxMessage(hcan1, &TxHeader1, &TxData1[0], &TxMailbox1[0]) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
}
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000100 	.word	0x20000100
 80004f0:	200000a8 	.word	0x200000a8
 80004f4:	20000111 	.word	0x20000111

080004f8 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan2)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan2, CAN_RX_FIFO1, &RxHeader2, RxData2);
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <HAL_CAN_RxFifo1MsgPendingCallback+0x28>)
 8000502:	4a08      	ldr	r2, [pc, #32]	; (8000524 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000504:	2101      	movs	r1, #1
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f000 febb 	bl	8001282 <HAL_CAN_GetRxMessage>
	count++;
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800050e:	781b      	ldrb	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	b2da      	uxtb	r2, r3
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000516:	701a      	strb	r2, [r3, #0]

//	  if (HAL_CAN_AddTxMessage(hcan2, &TxHeader2, &TxData2[0], &TxMailbox2[0]) != HAL_OK)
//	  {
//		  Error_Handler();
//	  }
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000108 	.word	0x20000108
 8000524:	200000c4 	.word	0x200000c4
 8000528:	20000111 	.word	0x20000111

0800052c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000530:	f000 fb26 	bl	8000b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000534:	f000 f88e 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000538:	f000 f97c 	bl	8000834 <MX_GPIO_Init>
  MX_CAN1_Init();
 800053c:	f000 f8d2 	bl	80006e4 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000540:	f000 f924 	bl	800078c <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000544:	4839      	ldr	r0, [pc, #228]	; (800062c <main+0x100>)
 8000546:	f000 fd89 	bl	800105c <HAL_CAN_Start>
  HAL_CAN_Start(&hcan2);
 800054a:	4839      	ldr	r0, [pc, #228]	; (8000630 <main+0x104>)
 800054c:	f000 fd86 	bl	800105c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000550:	2102      	movs	r1, #2
 8000552:	4836      	ldr	r0, [pc, #216]	; (800062c <main+0x100>)
 8000554:	f000 ffb6 	bl	80014c4 <HAL_CAN_ActivateNotification>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000558:	2110      	movs	r1, #16
 800055a:	4835      	ldr	r0, [pc, #212]	; (8000630 <main+0x104>)
 800055c:	f000 ffb2 	bl	80014c4 <HAL_CAN_ActivateNotification>

  TxHeader1.DLC = 2;
 8000560:	4b34      	ldr	r3, [pc, #208]	; (8000634 <main+0x108>)
 8000562:	2202      	movs	r2, #2
 8000564:	611a      	str	r2, [r3, #16]
  TxHeader1.ExtId = 0;
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <main+0x108>)
 8000568:	2200      	movs	r2, #0
 800056a:	605a      	str	r2, [r3, #4]
  TxHeader1.IDE = CAN_ID_STD;
 800056c:	4b31      	ldr	r3, [pc, #196]	; (8000634 <main+0x108>)
 800056e:	2200      	movs	r2, #0
 8000570:	609a      	str	r2, [r3, #8]
  TxHeader1.RTR = CAN_RTR_DATA;
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <main+0x108>)
 8000574:	2200      	movs	r2, #0
 8000576:	60da      	str	r2, [r3, #12]
  TxHeader1.StdId = 0x111;
 8000578:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <main+0x108>)
 800057a:	f240 1211 	movw	r2, #273	; 0x111
 800057e:	601a      	str	r2, [r3, #0]
  TxHeader1.TransmitGlobalTime = DISABLE;
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <main+0x108>)
 8000582:	2200      	movs	r2, #0
 8000584:	751a      	strb	r2, [r3, #20]
  TxData1[0] = 0x01;
 8000586:	4b2c      	ldr	r3, [pc, #176]	; (8000638 <main+0x10c>)
 8000588:	2201      	movs	r2, #1
 800058a:	701a      	strb	r2, [r3, #0]
  TxData1[1] = 0x02;
 800058c:	4b2a      	ldr	r3, [pc, #168]	; (8000638 <main+0x10c>)
 800058e:	2202      	movs	r2, #2
 8000590:	705a      	strb	r2, [r3, #1]
  TxData1[2] = 0x03;
 8000592:	4b29      	ldr	r3, [pc, #164]	; (8000638 <main+0x10c>)
 8000594:	2203      	movs	r2, #3
 8000596:	709a      	strb	r2, [r3, #2]
  TxData1[3] = 0x04;
 8000598:	4b27      	ldr	r3, [pc, #156]	; (8000638 <main+0x10c>)
 800059a:	2204      	movs	r2, #4
 800059c:	70da      	strb	r2, [r3, #3]

  TxHeader2.DLC = 2;
 800059e:	4b27      	ldr	r3, [pc, #156]	; (800063c <main+0x110>)
 80005a0:	2202      	movs	r2, #2
 80005a2:	611a      	str	r2, [r3, #16]
  TxHeader2.ExtId = 0;
 80005a4:	4b25      	ldr	r3, [pc, #148]	; (800063c <main+0x110>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	605a      	str	r2, [r3, #4]
  TxHeader2.IDE = CAN_ID_STD;
 80005aa:	4b24      	ldr	r3, [pc, #144]	; (800063c <main+0x110>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  TxHeader2.RTR = CAN_RTR_DATA;
 80005b0:	4b22      	ldr	r3, [pc, #136]	; (800063c <main+0x110>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  TxHeader2.StdId = 0x222;
 80005b6:	4b21      	ldr	r3, [pc, #132]	; (800063c <main+0x110>)
 80005b8:	f240 2222 	movw	r2, #546	; 0x222
 80005bc:	601a      	str	r2, [r3, #0]
  TxHeader2.TransmitGlobalTime = DISABLE;
 80005be:	4b1f      	ldr	r3, [pc, #124]	; (800063c <main+0x110>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	751a      	strb	r2, [r3, #20]
  TxData2[0] = 0x05;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <main+0x114>)
 80005c6:	2205      	movs	r2, #5
 80005c8:	701a      	strb	r2, [r3, #0]
  TxData2[1] = 0x06;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <main+0x114>)
 80005cc:	2206      	movs	r2, #6
 80005ce:	705a      	strb	r2, [r3, #1]
  TxData2[2] = 0x07;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <main+0x114>)
 80005d2:	2207      	movs	r2, #7
 80005d4:	709a      	strb	r2, [r3, #2]
  TxData2[3] = 0x08;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <main+0x114>)
 80005d8:	2208      	movs	r2, #8
 80005da:	70da      	strb	r2, [r3, #3]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check++;
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <main+0x118>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b17      	ldr	r3, [pc, #92]	; (8000644 <main+0x118>)
 80005e6:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2101      	movs	r1, #1
 80005ec:	4816      	ldr	r0, [pc, #88]	; (8000648 <main+0x11c>)
 80005ee:	f001 fc55 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 80005f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005f6:	f000 fb31 	bl	8000c5c <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2101      	movs	r1, #1
 80005fe:	4812      	ldr	r0, [pc, #72]	; (8000648 <main+0x11c>)
 8000600:	f001 fc4c 	bl	8001e9c <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000604:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000608:	f000 fb28 	bl	8000c5c <HAL_Delay>
	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader1, &TxData1[0], &TxMailbox1[0]) != HAL_OK)
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <main+0x120>)
 800060e:	4a0a      	ldr	r2, [pc, #40]	; (8000638 <main+0x10c>)
 8000610:	4908      	ldr	r1, [pc, #32]	; (8000634 <main+0x108>)
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <main+0x100>)
 8000614:	f000 fd66 	bl	80010e4 <HAL_CAN_AddTxMessage>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d0de      	beq.n	80005dc <main+0xb0>
	  {
		  count=100;
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <main+0x124>)
 8000620:	2264      	movs	r2, #100	; 0x64
 8000622:	701a      	strb	r2, [r3, #0]
		  Error_Handler();
 8000624:	f000 f956 	bl	80008d4 <Error_Handler>
	  check++;
 8000628:	e7d8      	b.n	80005dc <main+0xb0>
 800062a:	bf00      	nop
 800062c:	20000028 	.word	0x20000028
 8000630:	20000050 	.word	0x20000050
 8000634:	20000078 	.word	0x20000078
 8000638:	200000f0 	.word	0x200000f0
 800063c:	20000090 	.word	0x20000090
 8000640:	200000f8 	.word	0x200000f8
 8000644:	20000110 	.word	0x20000110
 8000648:	40020400 	.word	0x40020400
 800064c:	200000e0 	.word	0x200000e0
 8000650:	20000111 	.word	0x20000111

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b092      	sub	sp, #72	; 0x48
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0318 	add.w	r3, r7, #24
 800065e:	2230      	movs	r2, #48	; 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f002 f896 	bl	8002794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000682:	2302      	movs	r3, #2
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000686:	2300      	movs	r3, #0
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 800068a:	230d      	movs	r3, #13
 800068c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 800068e:	23c3      	movs	r3, #195	; 0xc3
 8000690:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000692:	2302      	movs	r3, #2
 8000694:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000696:	2304      	movs	r3, #4
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fc2c 	bl	8001efc <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006aa:	f000 f913 	bl	80008d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80006c0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2103      	movs	r1, #3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f001 fe6a 	bl	80023a4 <HAL_RCC_ClockConfig>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SystemClock_Config+0x86>
  {
    Error_Handler();
 80006d6:	f000 f8fd 	bl	80008d4 <Error_Handler>
  }
}
 80006da:	bf00      	nop
 80006dc:	3748      	adds	r7, #72	; 0x48
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006ea:	4b26      	ldr	r3, [pc, #152]	; (8000784 <MX_CAN1_Init+0xa0>)
 80006ec:	4a26      	ldr	r2, [pc, #152]	; (8000788 <MX_CAN1_Init+0xa4>)
 80006ee:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 80006f0:	4b24      	ldr	r3, [pc, #144]	; (8000784 <MX_CAN1_Init+0xa0>)
 80006f2:	2206      	movs	r2, #6
 80006f4:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 80006f6:	4b23      	ldr	r3, [pc, #140]	; (8000784 <MX_CAN1_Init+0xa0>)
 80006f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fe:	4b21      	ldr	r3, [pc, #132]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000704:	4b1f      	ldr	r3, [pc, #124]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000706:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800070a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <MX_CAN1_Init+0xa0>)
 800070e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000712:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000716:	2200      	movs	r2, #0
 8000718:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <MX_CAN1_Init+0xa0>)
 800071c:	2200      	movs	r2, #0
 800071e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000720:	4b18      	ldr	r3, [pc, #96]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000722:	2200      	movs	r2, #0
 8000724:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000726:	4b17      	ldr	r3, [pc, #92]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000728:	2200      	movs	r2, #0
 800072a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_CAN1_Init+0xa0>)
 800072e:	2200      	movs	r2, #0
 8000730:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000734:	2200      	movs	r2, #0
 8000736:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_CAN1_Init+0xa0>)
 800073a:	f000 fab3 	bl	8000ca4 <HAL_CAN_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000744:	f000 f8c6 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef sFilterConfig;

  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000748:	2301      	movs	r3, #1
 800074a:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 0;  // anything between 0 to SlaveStartFilterBank
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
   sFilterConfig.FilterIdHigh = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
   sFilterConfig.FilterIdLow = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
   sFilterConfig.FilterMaskIdHigh = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
   sFilterConfig.FilterMaskIdLow = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000768:	2301      	movs	r3, #1
 800076a:	61fb      	str	r3, [r7, #28]
   sFilterConfig.SlaveStartFilterBank = 12;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 800076c:	230c      	movs	r3, #12
 800076e:	627b      	str	r3, [r7, #36]	; 0x24

   HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <MX_CAN1_Init+0xa0>)
 8000776:	f000 fb91 	bl	8000e9c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000028 	.word	0x20000028
 8000788:	40006400 	.word	0x40006400

0800078c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	; 0x28
 8000790:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000792:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_CAN2_Init+0xa0>)
 8000794:	4a26      	ldr	r2, [pc, #152]	; (8000830 <MX_CAN2_Init+0xa4>)
 8000796:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <MX_CAN2_Init+0xa0>)
 800079a:	2206      	movs	r2, #6
 800079c:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_LOOPBACK;
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <MX_CAN2_Init+0xa0>)
 80007a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007a4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_CAN2_Init+0xa0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_6TQ;
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_CAN2_Init+0xa0>)
 80007ae:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 80007b2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_CAN2_Init+0xa0>)
 80007b6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80007ba:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80007bc:	4b1b      	ldr	r3, [pc, #108]	; (800082c <MX_CAN2_Init+0xa0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_CAN2_Init+0xa0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_CAN2_Init+0xa0>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80007ce:	4b17      	ldr	r3, [pc, #92]	; (800082c <MX_CAN2_Init+0xa0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80007d4:	4b15      	ldr	r3, [pc, #84]	; (800082c <MX_CAN2_Init+0xa0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80007da:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_CAN2_Init+0xa0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80007e0:	4812      	ldr	r0, [pc, #72]	; (800082c <MX_CAN2_Init+0xa0>)
 80007e2:	f000 fa5f 	bl	8000ca4 <HAL_CAN_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 80007ec:	f000 f872 	bl	80008d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
  CAN_FilterTypeDef sFilterConfig2;

  sFilterConfig2.FilterActivation = CAN_FILTER_ENABLE;
 80007f0:	2301      	movs	r3, #1
 80007f2:	623b      	str	r3, [r7, #32]
  sFilterConfig2.FilterBank = 15;  // anything between 0 to SlaveStartFilterBank
 80007f4:	230f      	movs	r3, #15
 80007f6:	617b      	str	r3, [r7, #20]
  sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 80007f8:	2301      	movs	r3, #1
 80007fa:	613b      	str	r3, [r7, #16]
  sFilterConfig2.FilterIdHigh = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	603b      	str	r3, [r7, #0]
  sFilterConfig2.FilterIdLow = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
  sFilterConfig2.FilterMaskIdHigh = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sFilterConfig2.FilterMaskIdLow = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000810:	2301      	movs	r3, #1
 8000812:	61fb      	str	r3, [r7, #28]
  sFilterConfig2.SlaveStartFilterBank = 13;  // 13 to 27 are assigned to slave CAN (CAN 2) OR 0 to 12 are assgned to CAN1
 8000814:	230d      	movs	r3, #13
 8000816:	627b      	str	r3, [r7, #36]	; 0x24


   HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2);
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_CAN2_Init+0xa0>)
 800081e:	f000 fb3d 	bl	8000e9c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN2_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000050 	.word	0x20000050
 8000830:	40006800 	.word	0x40006800

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 030c 	add.w	r3, r7, #12
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	60bb      	str	r3, [r7, #8]
 800084e:	4b1f      	ldr	r3, [pc, #124]	; (80008cc <MX_GPIO_Init+0x98>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a1e      	ldr	r2, [pc, #120]	; (80008cc <MX_GPIO_Init+0x98>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b1c      	ldr	r3, [pc, #112]	; (80008cc <MX_GPIO_Init+0x98>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	607b      	str	r3, [r7, #4]
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <MX_GPIO_Init+0x98>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <MX_GPIO_Init+0x98>)
 8000870:	f043 0302 	orr.w	r3, r3, #2
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <MX_GPIO_Init+0x98>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0302 	and.w	r3, r3, #2
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	603b      	str	r3, [r7, #0]
 8000886:	4b11      	ldr	r3, [pc, #68]	; (80008cc <MX_GPIO_Init+0x98>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	4a10      	ldr	r2, [pc, #64]	; (80008cc <MX_GPIO_Init+0x98>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	; 0x30
 8000892:	4b0e      	ldr	r3, [pc, #56]	; (80008cc <MX_GPIO_Init+0x98>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	2101      	movs	r1, #1
 80008a2:	480b      	ldr	r0, [pc, #44]	; (80008d0 <MX_GPIO_Init+0x9c>)
 80008a4:	f001 fafa 	bl	8001e9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008a8:	2301      	movs	r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	2301      	movs	r3, #1
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 030c 	add.w	r3, r7, #12
 80008bc:	4619      	mov	r1, r3
 80008be:	4804      	ldr	r0, [pc, #16]	; (80008d0 <MX_GPIO_Init+0x9c>)
 80008c0:	f001 f94e 	bl	8001b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020400 	.word	0x40020400

080008d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008d8:	b672      	cpsid	i
}
 80008da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008dc:	e7fe      	b.n	80008dc <Error_Handler+0x8>
	...

080008e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <HAL_MspInit+0x58>)
 80008ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <HAL_MspInit+0x58>)
 80008f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f4:	6453      	str	r3, [r2, #68]	; 0x44
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x58>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_MspInit+0x58>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_MspInit+0x58>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x58>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2001      	movs	r0, #1
 8000924:	f001 f8e5 	bl	8001af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8000928:	2001      	movs	r0, #1
 800092a:	f001 f8fe 	bl	8001b2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 031c 	add.w	r3, r7, #28
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a4b      	ldr	r2, [pc, #300]	; (8000a88 <HAL_CAN_MspInit+0x14c>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d13e      	bne.n	80009dc <HAL_CAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800095e:	4b4b      	ldr	r3, [pc, #300]	; (8000a8c <HAL_CAN_MspInit+0x150>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	3301      	adds	r3, #1
 8000964:	4a49      	ldr	r2, [pc, #292]	; (8000a8c <HAL_CAN_MspInit+0x150>)
 8000966:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000968:	4b48      	ldr	r3, [pc, #288]	; (8000a8c <HAL_CAN_MspInit+0x150>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d10d      	bne.n	800098c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
 8000974:	4b46      	ldr	r3, [pc, #280]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000978:	4a45      	ldr	r2, [pc, #276]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 800097a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800097e:	6413      	str	r3, [r2, #64]	; 0x40
 8000980:	4b43      	ldr	r3, [pc, #268]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000988:	61bb      	str	r3, [r7, #24]
 800098a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	4b3f      	ldr	r3, [pc, #252]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000994:	4a3e      	ldr	r2, [pc, #248]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000996:	f043 0302 	orr.w	r3, r3, #2
 800099a:	6313      	str	r3, [r2, #48]	; 0x30
 800099c:	4b3c      	ldr	r3, [pc, #240]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 800099e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a0:	f003 0302 	and.w	r3, r3, #2
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009a8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80009ba:	2309      	movs	r3, #9
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4833      	ldr	r0, [pc, #204]	; (8000a94 <HAL_CAN_MspInit+0x158>)
 80009c6:	f001 f8cb 	bl	8001b60 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2014      	movs	r0, #20
 80009d0:	f001 f88f 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80009d4:	2014      	movs	r0, #20
 80009d6:	f001 f8a8 	bl	8001b2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80009da:	e050      	b.n	8000a7e <HAL_CAN_MspInit+0x142>
  else if(hcan->Instance==CAN2)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a2d      	ldr	r2, [pc, #180]	; (8000a98 <HAL_CAN_MspInit+0x15c>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d14b      	bne.n	8000a7e <HAL_CAN_MspInit+0x142>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]
 80009ea:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a28      	ldr	r2, [pc, #160]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 80009f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_CAN_MspInit+0x150>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	3301      	adds	r3, #1
 8000a08:	4a20      	ldr	r2, [pc, #128]	; (8000a8c <HAL_CAN_MspInit+0x150>)
 8000a0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_CAN_MspInit+0x150>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d10d      	bne.n	8000a30 <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a1c:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000a1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a22:	6413      	str	r3, [r2, #64]	; 0x40
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a15      	ldr	r2, [pc, #84]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000a3a:	f043 0302 	orr.w	r3, r3, #2
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_CAN_MspInit+0x154>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0302 	and.w	r3, r3, #2
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000a4c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a52:	2302      	movs	r3, #2
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000a5e:	2309      	movs	r3, #9
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a62:	f107 031c 	add.w	r3, r7, #28
 8000a66:	4619      	mov	r1, r3
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <HAL_CAN_MspInit+0x158>)
 8000a6a:	f001 f879 	bl	8001b60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 8000a6e:	2200      	movs	r2, #0
 8000a70:	2100      	movs	r1, #0
 8000a72:	2041      	movs	r0, #65	; 0x41
 8000a74:	f001 f83d 	bl	8001af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8000a78:	2041      	movs	r0, #65	; 0x41
 8000a7a:	f001 f856 	bl	8001b2a <HAL_NVIC_EnableIRQ>
}
 8000a7e:	bf00      	nop
 8000a80:	3730      	adds	r7, #48	; 0x30
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40006400 	.word	0x40006400
 8000a8c:	20000114 	.word	0x20000114
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020400 	.word	0x40020400
 8000a98:	40006800 	.word	0x40006800

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr

08000ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae2:	f000 f89f 	bl	8000c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line16.
  */
void PVD_IRQHandler(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8000aee:	f001 f9ed 	bl	8001ecc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
	...

08000af8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <CAN1_RX0_IRQHandler+0x10>)
 8000afe:	f000 fd06 	bl	800150e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000028 	.word	0x20000028

08000b0c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <CAN2_RX1_IRQHandler+0x10>)
 8000b12:	f000 fcfc 	bl	800150e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	20000050 	.word	0x20000050

08000b20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b64 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000b30:	f7ff fff6 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b36:	490d      	ldr	r1, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b38:	4a0d      	ldr	r2, [pc, #52]	; (8000b70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	; (8000b78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b5a:	f001 fe23 	bl	80027a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b5e:	f7ff fce5 	bl	800052c <main>
  bx  lr
 8000b62:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b70:	08002824 	.word	0x08002824
  ldr r2, =_sbss
 8000b74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b78:	2000011c 	.word	0x2000011c

08000b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b7c:	e7fe      	b.n	8000b7c <ADC_IRQHandler>
	...

08000b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <HAL_Init+0x40>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <HAL_Init+0x40>)
 8000b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a07      	ldr	r2, [pc, #28]	; (8000bc0 <HAL_Init+0x40>)
 8000ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ba8:	2003      	movs	r0, #3
 8000baa:	f000 ff97 	bl	8001adc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 f808 	bl	8000bc4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bb4:	f7ff fe94 	bl	80008e0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bb8:	2300      	movs	r3, #0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40023c00 	.word	0x40023c00

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b12      	ldr	r3, [pc, #72]	; (8000c18 <HAL_InitTick+0x54>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_InitTick+0x58>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 ffaf 	bl	8001b46 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e00e      	b.n	8000c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b0f      	cmp	r3, #15
 8000bf6:	d80a      	bhi.n	8000c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	f000 ff77 	bl	8001af2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c04:	4a06      	ldr	r2, [pc, #24]	; (8000c20 <HAL_InitTick+0x5c>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	e000      	b.n	8000c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000004 	.word	0x20000004

08000c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <HAL_IncTick+0x1c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_IncTick+0x20>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <HAL_IncTick+0x20>)
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000118 	.word	0x20000118

08000c48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c4c:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <HAL_GetTick+0x10>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr
 8000c58:	20000118 	.word	0x20000118

08000c5c <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c64:	f7ff fff0 	bl	8000c48 <HAL_GetTick>
 8000c68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c74:	d005      	beq.n	8000c82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_Delay+0x44>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	4413      	add	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c82:	bf00      	nop
 8000c84:	f7ff ffe0 	bl	8000c48 <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d8f7      	bhi.n	8000c84 <HAL_Delay+0x28>
  {
  }
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e0ed      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d102      	bne.n	8000cc8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fe3a 	bl	800093c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f042 0201 	orr.w	r2, r2, #1
 8000cd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cd8:	f7ff ffb6 	bl	8000c48 <HAL_GetTick>
 8000cdc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cde:	e012      	b.n	8000d06 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ce0:	f7ff ffb2 	bl	8000c48 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b0a      	cmp	r3, #10
 8000cec:	d90b      	bls.n	8000d06 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cf2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2205      	movs	r2, #5
 8000cfe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e0c5      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f003 0301 	and.w	r3, r3, #1
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d0e5      	beq.n	8000ce0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f022 0202 	bic.w	r2, r2, #2
 8000d22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d24:	f7ff ff90 	bl	8000c48 <HAL_GetTick>
 8000d28:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d2a:	e012      	b.n	8000d52 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d2c:	f7ff ff8c 	bl	8000c48 <HAL_GetTick>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d90b      	bls.n	8000d52 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2205      	movs	r2, #5
 8000d4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e09f      	b.n	8000e92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d1e5      	bne.n	8000d2c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	7e1b      	ldrb	r3, [r3, #24]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d108      	bne.n	8000d7a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	e007      	b.n	8000d8a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	7e5b      	ldrb	r3, [r3, #25]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d108      	bne.n	8000da4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e007      	b.n	8000db4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000db2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	7e9b      	ldrb	r3, [r3, #26]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d108      	bne.n	8000dce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f042 0220 	orr.w	r2, r2, #32
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	e007      	b.n	8000dde <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0220 	bic.w	r2, r2, #32
 8000ddc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	7edb      	ldrb	r3, [r3, #27]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d108      	bne.n	8000df8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f022 0210 	bic.w	r2, r2, #16
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	e007      	b.n	8000e08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f042 0210 	orr.w	r2, r2, #16
 8000e06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	7f1b      	ldrb	r3, [r3, #28]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d108      	bne.n	8000e22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0208 	orr.w	r2, r2, #8
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	e007      	b.n	8000e32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0208 	bic.w	r2, r2, #8
 8000e30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	7f5b      	ldrb	r3, [r3, #29]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d108      	bne.n	8000e4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f042 0204 	orr.w	r2, r2, #4
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	e007      	b.n	8000e5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 0204 	bic.w	r2, r2, #4
 8000e5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	431a      	orrs	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	691b      	ldr	r3, [r3, #16]
 8000e6a:	431a      	orrs	r2, r3
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	695b      	ldr	r3, [r3, #20]
 8000e70:	ea42 0103 	orr.w	r1, r2, r3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	1e5a      	subs	r2, r3, #1
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
	...

08000e9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000eb4:	7cfb      	ldrb	r3, [r7, #19]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d003      	beq.n	8000ec2 <HAL_CAN_ConfigFilter+0x26>
 8000eba:	7cfb      	ldrb	r3, [r7, #19]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	f040 80be 	bne.w	800103e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000ec2:	4b65      	ldr	r3, [pc, #404]	; (8001058 <HAL_CAN_ConfigFilter+0x1bc>)
 8000ec4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000edc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef0:	021b      	lsls	r3, r3, #8
 8000ef2:	431a      	orrs	r2, r3
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	f003 031f 	and.w	r3, r3, #31
 8000f02:	2201      	movs	r2, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	43db      	mvns	r3, r3
 8000f14:	401a      	ands	r2, r3
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	69db      	ldr	r3, [r3, #28]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d123      	bne.n	8000f6c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	401a      	ands	r2, r3
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	3248      	adds	r2, #72	; 0x48
 8000f4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f62:	6979      	ldr	r1, [r7, #20]
 8000f64:	3348      	adds	r3, #72	; 0x48
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	440b      	add	r3, r1
 8000f6a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d122      	bne.n	8000fba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f90:	683a      	ldr	r2, [r7, #0]
 8000f92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	3248      	adds	r2, #72	; 0x48
 8000f9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fb0:	6979      	ldr	r1, [r7, #20]
 8000fb2:	3348      	adds	r3, #72	; 0x48
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	440b      	add	r3, r1
 8000fb8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d109      	bne.n	8000fd6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	401a      	ands	r2, r3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fd4:	e007      	b.n	8000fe6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	431a      	orrs	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	401a      	ands	r2, r3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001000:	e007      	b.n	8001012 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	431a      	orrs	r2, r3
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	431a      	orrs	r2, r3
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001030:	f023 0201 	bic.w	r2, r3, #1
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800103a:	2300      	movs	r3, #0
 800103c:	e006      	b.n	800104c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001042:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
  }
}
 800104c:	4618      	mov	r0, r3
 800104e:	371c      	adds	r7, #28
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	40006400 	.word	0x40006400

0800105c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d12e      	bne.n	80010ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001088:	f7ff fdde 	bl	8000c48 <HAL_GetTick>
 800108c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800108e:	e012      	b.n	80010b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001090:	f7ff fdda 	bl	8000c48 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b0a      	cmp	r3, #10
 800109c:	d90b      	bls.n	80010b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2205      	movs	r2, #5
 80010ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e012      	b.n	80010dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1e5      	bne.n	8001090 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e006      	b.n	80010dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
  }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 80010f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001102:	7ffb      	ldrb	r3, [r7, #31]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d003      	beq.n	8001110 <HAL_CAN_AddTxMessage+0x2c>
 8001108:	7ffb      	ldrb	r3, [r7, #31]
 800110a:	2b02      	cmp	r3, #2
 800110c:	f040 80ad 	bne.w	800126a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10a      	bne.n	8001130 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001120:	2b00      	cmp	r3, #0
 8001122:	d105      	bne.n	8001130 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 8095 	beq.w	800125a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	0e1b      	lsrs	r3, r3, #24
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	409a      	lsls	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10d      	bne.n	8001168 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	6809      	ldr	r1, [r1, #0]
 800115a:	431a      	orrs	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	3318      	adds	r3, #24
 8001160:	011b      	lsls	r3, r3, #4
 8001162:	440b      	add	r3, r1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e00f      	b.n	8001188 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001172:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800117c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	3318      	adds	r3, #24
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	440b      	add	r3, r1
 8001186:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	3318      	adds	r3, #24
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	440b      	add	r3, r1
 8001198:	3304      	adds	r3, #4
 800119a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	7d1b      	ldrb	r3, [r3, #20]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d111      	bne.n	80011c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3318      	adds	r3, #24
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	4413      	add	r3, r2
 80011b0:	3304      	adds	r3, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	6811      	ldr	r1, [r2, #0]
 80011b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	3318      	adds	r3, #24
 80011c0:	011b      	lsls	r3, r3, #4
 80011c2:	440b      	add	r3, r1
 80011c4:	3304      	adds	r3, #4
 80011c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3307      	adds	r3, #7
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	061a      	lsls	r2, r3, #24
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3306      	adds	r3, #6
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	041b      	lsls	r3, r3, #16
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3305      	adds	r3, #5
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	4313      	orrs	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	3204      	adds	r2, #4
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	4610      	mov	r0, r2
 80011ec:	68fa      	ldr	r2, [r7, #12]
 80011ee:	6811      	ldr	r1, [r2, #0]
 80011f0:	ea43 0200 	orr.w	r2, r3, r0
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	011b      	lsls	r3, r3, #4
 80011f8:	440b      	add	r3, r1
 80011fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3303      	adds	r3, #3
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	061a      	lsls	r2, r3, #24
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3302      	adds	r3, #2
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	041b      	lsls	r3, r3, #16
 8001210:	431a      	orrs	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3301      	adds	r3, #1
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	4313      	orrs	r3, r2
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	4610      	mov	r0, r2
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	6811      	ldr	r1, [r2, #0]
 8001226:	ea43 0200 	orr.w	r2, r3, r0
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	011b      	lsls	r3, r3, #4
 800122e:	440b      	add	r3, r1
 8001230:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001234:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	3318      	adds	r3, #24
 800123e:	011b      	lsls	r3, r3, #4
 8001240:	4413      	add	r3, r2
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68fa      	ldr	r2, [r7, #12]
 8001246:	6811      	ldr	r1, [r2, #0]
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3318      	adds	r3, #24
 8001250:	011b      	lsls	r3, r3, #4
 8001252:	440b      	add	r3, r1
 8001254:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001256:	2300      	movs	r3, #0
 8001258:	e00e      	b.n	8001278 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e006      	b.n	8001278 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
  }
}
 8001278:	4618      	mov	r0, r3
 800127a:	3724      	adds	r7, #36	; 0x24
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001282:	b480      	push	{r7}
 8001284:	b087      	sub	sp, #28
 8001286:	af00      	add	r7, sp, #0
 8001288:	60f8      	str	r0, [r7, #12]
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001296:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001298:	7dfb      	ldrb	r3, [r7, #23]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d003      	beq.n	80012a6 <HAL_CAN_GetRxMessage+0x24>
 800129e:	7dfb      	ldrb	r3, [r7, #23]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	f040 8103 	bne.w	80014ac <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10e      	bne.n	80012ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f003 0303 	and.w	r3, r3, #3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d116      	bne.n	80012e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e0f7      	b.n	80014ba <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	f003 0303 	and.w	r3, r3, #3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d107      	bne.n	80012e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e0e8      	b.n	80014ba <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	331b      	adds	r3, #27
 80012f0:	011b      	lsls	r3, r3, #4
 80012f2:	4413      	add	r3, r2
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 0204 	and.w	r2, r3, #4
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10c      	bne.n	8001320 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	331b      	adds	r3, #27
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	4413      	add	r3, r2
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	0d5b      	lsrs	r3, r3, #21
 8001316:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e00b      	b.n	8001338 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	331b      	adds	r3, #27
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	4413      	add	r3, r2
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	08db      	lsrs	r3, r3, #3
 8001330:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	331b      	adds	r3, #27
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0202 	and.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	331b      	adds	r3, #27
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4413      	add	r3, r2
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2208      	movs	r2, #8
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	e00b      	b.n	8001386 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	331b      	adds	r3, #27
 8001376:	011b      	lsls	r3, r3, #4
 8001378:	4413      	add	r3, r2
 800137a:	3304      	adds	r3, #4
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 020f 	and.w	r2, r3, #15
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	331b      	adds	r3, #27
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	3304      	adds	r3, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b2da      	uxtb	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	331b      	adds	r3, #27
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	3304      	adds	r3, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	011b      	lsls	r3, r3, #4
 80013be:	4413      	add	r3, r2
 80013c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	4413      	add	r3, r2
 80013d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	0a1a      	lsrs	r2, r3, #8
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	0c1a      	lsrs	r2, r3, #16
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	3302      	adds	r3, #2
 80013fc:	b2d2      	uxtb	r2, r2
 80013fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	4413      	add	r3, r2
 800140a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	0e1a      	lsrs	r2, r3, #24
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3303      	adds	r3, #3
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	011b      	lsls	r3, r3, #4
 8001422:	4413      	add	r3, r2
 8001424:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3304      	adds	r3, #4
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	0a1a      	lsrs	r2, r3, #8
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3305      	adds	r3, #5
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	011b      	lsls	r3, r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	0c1a      	lsrs	r2, r3, #16
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3306      	adds	r3, #6
 8001462:	b2d2      	uxtb	r2, r2
 8001464:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	011b      	lsls	r3, r3, #4
 800146e:	4413      	add	r3, r2
 8001470:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0e1a      	lsrs	r2, r3, #24
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	3307      	adds	r3, #7
 800147c:	b2d2      	uxtb	r2, r2
 800147e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d108      	bne.n	8001498 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	68da      	ldr	r2, [r3, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	e007      	b.n	80014a8 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	691a      	ldr	r2, [r3, #16]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0220 	orr.w	r2, r2, #32
 80014a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e006      	b.n	80014ba <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
  }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	371c      	adds	r7, #28
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014d6:	7bfb      	ldrb	r3, [r7, #15]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d002      	beq.n	80014e2 <HAL_CAN_ActivateNotification+0x1e>
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d109      	bne.n	80014f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6959      	ldr	r1, [r3, #20]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80014f2:	2300      	movs	r3, #0
 80014f4:	e006      	b.n	8001504 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
  }
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b08a      	sub	sp, #40	; 0x28
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800154a:	6a3b      	ldr	r3, [r7, #32]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d07c      	beq.n	800164e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	2b00      	cmp	r3, #0
 800155c:	d023      	beq.n	80015a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2201      	movs	r2, #1
 8001564:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d003      	beq.n	8001578 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f983 	bl	800187c <HAL_CAN_TxMailbox0CompleteCallback>
 8001576:	e016      	b.n	80015a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	2b00      	cmp	r3, #0
 8001580:	d004      	beq.n	800158c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
 800158a:	e00c      	b.n	80015a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001598:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	e002      	b.n	80015a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 f986 	bl	80018b2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d024      	beq.n	80015fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f000 f962 	bl	800188e <HAL_CAN_TxMailbox1CompleteCallback>
 80015ca:	e016      	b.n	80015fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
 80015de:	e00c      	b.n	80015fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d004      	beq.n	80015f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80015ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
 80015f2:	e002      	b.n	80015fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f000 f965 	bl	80018c4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d024      	beq.n	800164e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800160c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d003      	beq.n	8001620 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f000 f941 	bl	80018a0 <HAL_CAN_TxMailbox2CompleteCallback>
 800161e:	e016      	b.n	800164e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800162a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001630:	627b      	str	r3, [r7, #36]	; 0x24
 8001632:	e00c      	b.n	800164e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d004      	beq.n	8001648 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	e002      	b.n	800164e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f944 	bl	80018d6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800164e:	6a3b      	ldr	r3, [r7, #32]
 8001650:	f003 0308 	and.w	r3, r3, #8
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00c      	beq.n	8001672 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001668:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2210      	movs	r2, #16
 8001670:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f003 0304 	and.w	r3, r3, #4
 8001678:	2b00      	cmp	r3, #0
 800167a:	d00b      	beq.n	8001694 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2208      	movs	r2, #8
 800168c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f92a 	bl	80018e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d009      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d002      	beq.n	80016b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7fe ff09 	bl	80004c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d00c      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d007      	beq.n	80016d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2210      	movs	r2, #16
 80016d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00b      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2208      	movs	r2, #8
 80016f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f000 f901 	bl	80018fa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d009      	beq.n	8001716 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7fe fef1 	bl	80004f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001716:	6a3b      	ldr	r3, [r7, #32]
 8001718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171c:	2b00      	cmp	r3, #0
 800171e:	d00b      	beq.n	8001738 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2210      	movs	r2, #16
 8001730:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f8ea 	bl	800190c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001738:	6a3b      	ldr	r3, [r7, #32]
 800173a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d00b      	beq.n	800175a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d006      	beq.n	800175a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2208      	movs	r2, #8
 8001752:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f000 f8e2 	bl	800191e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d07b      	beq.n	800185c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	2b00      	cmp	r3, #0
 800176c:	d072      	beq.n	8001854 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800176e:	6a3b      	ldr	r3, [r7, #32]
 8001770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800179a:	2b00      	cmp	r3, #0
 800179c:	d003      	beq.n	80017a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800179e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017a6:	6a3b      	ldr	r3, [r7, #32]
 80017a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d008      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	f043 0304 	orr.w	r3, r3, #4
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d043      	beq.n	8001854 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d03e      	beq.n	8001854 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80017dc:	2b60      	cmp	r3, #96	; 0x60
 80017de:	d02b      	beq.n	8001838 <HAL_CAN_IRQHandler+0x32a>
 80017e0:	2b60      	cmp	r3, #96	; 0x60
 80017e2:	d82e      	bhi.n	8001842 <HAL_CAN_IRQHandler+0x334>
 80017e4:	2b50      	cmp	r3, #80	; 0x50
 80017e6:	d022      	beq.n	800182e <HAL_CAN_IRQHandler+0x320>
 80017e8:	2b50      	cmp	r3, #80	; 0x50
 80017ea:	d82a      	bhi.n	8001842 <HAL_CAN_IRQHandler+0x334>
 80017ec:	2b40      	cmp	r3, #64	; 0x40
 80017ee:	d019      	beq.n	8001824 <HAL_CAN_IRQHandler+0x316>
 80017f0:	2b40      	cmp	r3, #64	; 0x40
 80017f2:	d826      	bhi.n	8001842 <HAL_CAN_IRQHandler+0x334>
 80017f4:	2b30      	cmp	r3, #48	; 0x30
 80017f6:	d010      	beq.n	800181a <HAL_CAN_IRQHandler+0x30c>
 80017f8:	2b30      	cmp	r3, #48	; 0x30
 80017fa:	d822      	bhi.n	8001842 <HAL_CAN_IRQHandler+0x334>
 80017fc:	2b10      	cmp	r3, #16
 80017fe:	d002      	beq.n	8001806 <HAL_CAN_IRQHandler+0x2f8>
 8001800:	2b20      	cmp	r3, #32
 8001802:	d005      	beq.n	8001810 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001804:	e01d      	b.n	8001842 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	f043 0308 	orr.w	r3, r3, #8
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800180e:	e019      	b.n	8001844 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001812:	f043 0310 	orr.w	r3, r3, #16
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001818:	e014      	b.n	8001844 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	f043 0320 	orr.w	r3, r3, #32
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001822:	e00f      	b.n	8001844 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800182c:	e00a      	b.n	8001844 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001836:	e005      	b.n	8001844 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001840:	e000      	b.n	8001844 <HAL_CAN_IRQHandler+0x336>
            break;
 8001842:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	699a      	ldr	r2, [r3, #24]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001852:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2204      	movs	r2, #4
 800185a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	2b00      	cmp	r3, #0
 8001860:	d008      	beq.n	8001874 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	431a      	orrs	r2, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f85e 	bl	8001930 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001874:	bf00      	nop
 8001876:	3728      	adds	r7, #40	; 0x28
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001884:	bf00      	nop
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	bc80      	pop	{r7}
 800188c:	4770      	bx	lr

0800188e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr

080018a0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr

080018d6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018d6:	b480      	push	{r7}
 80018d8:	b083      	sub	sp, #12
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bc80      	pop	{r7}
 80018f8:	4770      	bx	lr

080018fa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr

08001930 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
	...

08001944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001954:	4b0c      	ldr	r3, [pc, #48]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001960:	4013      	ands	r3, r2
 8001962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800196c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001970:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001976:	4a04      	ldr	r2, [pc, #16]	; (8001988 <__NVIC_SetPriorityGrouping+0x44>)
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	60d3      	str	r3, [r2, #12]
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	bc80      	pop	{r7}
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001990:	4b04      	ldr	r3, [pc, #16]	; (80019a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	0a1b      	lsrs	r3, r3, #8
 8001996:	f003 0307 	and.w	r3, r3, #7
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	db0b      	blt.n	80019d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	f003 021f 	and.w	r2, r3, #31
 80019c0:	4906      	ldr	r1, [pc, #24]	; (80019dc <__NVIC_EnableIRQ+0x34>)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	095b      	lsrs	r3, r3, #5
 80019c8:	2001      	movs	r0, #1
 80019ca:	fa00 f202 	lsl.w	r2, r0, r2
 80019ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019d2:	bf00      	nop
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bc80      	pop	{r7}
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa8:	d301      	bcc.n	8001aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e00f      	b.n	8001ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aae:	4a0a      	ldr	r2, [pc, #40]	; (8001ad8 <SysTick_Config+0x40>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3b01      	subs	r3, #1
 8001ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ab6:	210f      	movs	r1, #15
 8001ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8001abc:	f7ff ff90 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ac6:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <SysTick_Config+0x40>)
 8001ac8:	2207      	movs	r2, #7
 8001aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff ff2d 	bl	8001944 <__NVIC_SetPriorityGrouping>
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	4603      	mov	r3, r0
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
 8001afe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b04:	f7ff ff42 	bl	800198c <__NVIC_GetPriorityGrouping>
 8001b08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	6978      	ldr	r0, [r7, #20]
 8001b10:	f7ff ff90 	bl	8001a34 <NVIC_EncodePriority>
 8001b14:	4602      	mov	r2, r0
 8001b16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff5f 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b22:	bf00      	nop
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}

08001b2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2a:	b580      	push	{r7, lr}
 8001b2c:	b082      	sub	sp, #8
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	4603      	mov	r3, r0
 8001b32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff35 	bl	80019a8 <__NVIC_EnableIRQ>
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffa2 	bl	8001a98 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6e:	e16f      	b.n	8001e50 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 8161 	beq.w	8001e4a <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80bb 	beq.w	8001e4a <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cdc:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ce4:	4b61      	ldr	r3, [pc, #388]	; (8001e6c <HAL_GPIO_Init+0x30c>)
 8001ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf0:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_GPIO_Init+0x310>)
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	089b      	lsrs	r3, r3, #2
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	f003 0303 	and.w	r3, r3, #3
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	220f      	movs	r2, #15
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4013      	ands	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a57      	ldr	r2, [pc, #348]	; (8001e74 <HAL_GPIO_Init+0x314>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d031      	beq.n	8001d80 <HAL_GPIO_Init+0x220>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a56      	ldr	r2, [pc, #344]	; (8001e78 <HAL_GPIO_Init+0x318>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d02b      	beq.n	8001d7c <HAL_GPIO_Init+0x21c>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	4a55      	ldr	r2, [pc, #340]	; (8001e7c <HAL_GPIO_Init+0x31c>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d025      	beq.n	8001d78 <HAL_GPIO_Init+0x218>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a54      	ldr	r2, [pc, #336]	; (8001e80 <HAL_GPIO_Init+0x320>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d01f      	beq.n	8001d74 <HAL_GPIO_Init+0x214>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a53      	ldr	r2, [pc, #332]	; (8001e84 <HAL_GPIO_Init+0x324>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d019      	beq.n	8001d70 <HAL_GPIO_Init+0x210>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a52      	ldr	r2, [pc, #328]	; (8001e88 <HAL_GPIO_Init+0x328>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d013      	beq.n	8001d6c <HAL_GPIO_Init+0x20c>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a51      	ldr	r2, [pc, #324]	; (8001e8c <HAL_GPIO_Init+0x32c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00d      	beq.n	8001d68 <HAL_GPIO_Init+0x208>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a50      	ldr	r2, [pc, #320]	; (8001e90 <HAL_GPIO_Init+0x330>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d007      	beq.n	8001d64 <HAL_GPIO_Init+0x204>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a4f      	ldr	r2, [pc, #316]	; (8001e94 <HAL_GPIO_Init+0x334>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_GPIO_Init+0x200>
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	e010      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d60:	2309      	movs	r3, #9
 8001d62:	e00e      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d64:	2307      	movs	r3, #7
 8001d66:	e00c      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d68:	2306      	movs	r3, #6
 8001d6a:	e00a      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d6c:	2305      	movs	r3, #5
 8001d6e:	e008      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e006      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e004      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e002      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e000      	b.n	8001d82 <HAL_GPIO_Init+0x222>
 8001d80:	2300      	movs	r3, #0
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	f002 0203 	and.w	r2, r2, #3
 8001d88:	0092      	lsls	r2, r2, #2
 8001d8a:	4093      	lsls	r3, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d94:	4936      	ldr	r1, [pc, #216]	; (8001e70 <HAL_GPIO_Init+0x310>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da2:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dc6:	4a34      	ldr	r2, [pc, #208]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001df0:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001e1a:	4a1f      	ldr	r2, [pc, #124]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e44:	4a14      	ldr	r2, [pc, #80]	; (8001e98 <HAL_GPIO_Init+0x338>)
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa22 f303 	lsr.w	r3, r2, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f47f ae88 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bc80      	pop	{r7}
 8001e6a:	4770      	bx	lr
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	807b      	strh	r3, [r7, #2]
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eac:	787b      	ldrb	r3, [r7, #1]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001eb8:	e003      	b.n	8001ec2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001eba:	887b      	ldrh	r3, [r7, #2]
 8001ebc:	041a      	lsls	r2, r3, #16
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	619a      	str	r2, [r3, #24]
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <HAL_PWR_PVD_IRQHandler+0x20>)
 8001ed2:	695b      	ldr	r3, [r3, #20]
 8001ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8001edc:	f000 f808 	bl	8001ef0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8001ee0:	4b02      	ldr	r3, [pc, #8]	; (8001eec <HAL_PWR_PVD_IRQHandler+0x20>)
 8001ee2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ee6:	615a      	str	r2, [r3, #20]
  }
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40013c00 	.word	0x40013c00

08001ef0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e23b      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d050      	beq.n	8001fbc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f1a:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f003 030c 	and.w	r3, r3, #12
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d00c      	beq.n	8001f40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f26:	4b9b      	ldr	r3, [pc, #620]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f2e:	2b08      	cmp	r3, #8
 8001f30:	d112      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f32:	4b98      	ldr	r3, [pc, #608]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f3e:	d10b      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f40:	4b94      	ldr	r3, [pc, #592]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d036      	beq.n	8001fba <HAL_RCC_OscConfig+0xbe>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d132      	bne.n	8001fba <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e216      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4b8e      	ldr	r3, [pc, #568]	; (8002198 <HAL_RCC_OscConfig+0x29c>)
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d013      	beq.n	8001f92 <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe fe6d 	bl	8000c48 <HAL_GetTick>
 8001f6e:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f72:	f7fe fe69 	bl	8000c48 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b64      	cmp	r3, #100	; 0x64
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e200      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f84:	4b83      	ldr	r3, [pc, #524]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x76>
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f92:	f7fe fe59 	bl	8000c48 <HAL_GetTick>
 8001f96:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fe55 	bl	8000c48 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	6a3b      	ldr	r3, [r7, #32]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	; 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e1ec      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fac:	4b79      	ldr	r3, [pc, #484]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x9e>
 8001fb8:	e000      	b.n	8001fbc <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d077      	beq.n	80020b8 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc8:	4b72      	ldr	r3, [pc, #456]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 030c 	and.w	r3, r3, #12
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00b      	beq.n	8001fec <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fd4:	4b6f      	ldr	r3, [pc, #444]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d126      	bne.n	800202e <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fe0:	4b6c      	ldr	r3, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d120      	bne.n	800202e <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fec:	4b69      	ldr	r3, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d005      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e1c0      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002004:	4b63      	ldr	r3, [pc, #396]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	21f8      	movs	r1, #248	; 0xf8
 8002012:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002014:	69b9      	ldr	r1, [r7, #24]
 8002016:	fa91 f1a1 	rbit	r1, r1
 800201a:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800201c:	6979      	ldr	r1, [r7, #20]
 800201e:	fab1 f181 	clz	r1, r1
 8002022:	b2c9      	uxtb	r1, r1
 8002024:	408b      	lsls	r3, r1
 8002026:	495b      	ldr	r1, [pc, #364]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202c:	e044      	b.n	80020b8 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d02a      	beq.n	800208c <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002036:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_OscConfig+0x2a0>)
 8002038:	2201      	movs	r2, #1
 800203a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203c:	f7fe fe04 	bl	8000c48 <HAL_GetTick>
 8002040:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002044:	f7fe fe00 	bl	8000c48 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a3b      	ldr	r3, [r7, #32]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e197      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b4f      	ldr	r3, [pc, #316]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	21f8      	movs	r1, #248	; 0xf8
 8002070:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002072:	6939      	ldr	r1, [r7, #16]
 8002074:	fa91 f1a1 	rbit	r1, r1
 8002078:	60f9      	str	r1, [r7, #12]
  return result;
 800207a:	68f9      	ldr	r1, [r7, #12]
 800207c:	fab1 f181 	clz	r1, r1
 8002080:	b2c9      	uxtb	r1, r1
 8002082:	408b      	lsls	r3, r1
 8002084:	4943      	ldr	r1, [pc, #268]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002086:	4313      	orrs	r3, r2
 8002088:	600b      	str	r3, [r1, #0]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208c:	4b43      	ldr	r3, [pc, #268]	; (800219c <HAL_RCC_OscConfig+0x2a0>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002092:	f7fe fdd9 	bl	8000c48 <HAL_GetTick>
 8002096:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800209a:	f7fe fdd5 	bl	8000c48 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e16c      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ac:	4b39      	ldr	r3, [pc, #228]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1f0      	bne.n	800209a <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d030      	beq.n	8002126 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	695b      	ldr	r3, [r3, #20]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020cc:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_OscConfig+0x2a4>)
 80020ce:	2201      	movs	r2, #1
 80020d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7fe fdb9 	bl	8000c48 <HAL_GetTick>
 80020d6:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d8:	e008      	b.n	80020ec <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020da:	f7fe fdb5 	bl	8000c48 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	6a3b      	ldr	r3, [r7, #32]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	2b02      	cmp	r3, #2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e14c      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ec:	4b29      	ldr	r3, [pc, #164]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 80020ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d0f0      	beq.n	80020da <HAL_RCC_OscConfig+0x1de>
 80020f8:	e015      	b.n	8002126 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_RCC_OscConfig+0x2a4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7fe fda2 	bl	8000c48 <HAL_GetTick>
 8002104:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002108:	f7fe fd9e 	bl	8000c48 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e135      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211a:	4b1e      	ldr	r3, [pc, #120]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800211c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0304 	and.w	r3, r3, #4
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 8087 	beq.w	8002242 <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800213a:	4b16      	ldr	r3, [pc, #88]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d110      	bne.n	8002168 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a11      	ldr	r2, [pc, #68]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b0f      	ldr	r3, [pc, #60]	; (8002194 <HAL_RCC_OscConfig+0x298>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002162:	2301      	movs	r3, #1
 8002164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_RCC_OscConfig+0x2a8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_RCC_OscConfig+0x2a8>)
 800216e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002172:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x2a8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d122      	bne.n	80021c6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_OscConfig+0x2a8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_RCC_OscConfig+0x2a8>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800218c:	f7fe fd5c 	bl	8000c48 <HAL_GetTick>
 8002190:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002192:	e012      	b.n	80021ba <HAL_RCC_OscConfig+0x2be>
 8002194:	40023800 	.word	0x40023800
 8002198:	40023802 	.word	0x40023802
 800219c:	42470000 	.word	0x42470000
 80021a0:	42470e80 	.word	0x42470e80
 80021a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a8:	f7fe fd4e 	bl	8000c48 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	6a3b      	ldr	r3, [r7, #32]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0e5      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ba:	4b75      	ldr	r3, [pc, #468]	; (8002390 <HAL_RCC_OscConfig+0x494>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	4b72      	ldr	r3, [pc, #456]	; (8002394 <HAL_RCC_OscConfig+0x498>)
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d015      	beq.n	8002204 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fd36 	bl	8000c48 <HAL_GetTick>
 80021dc:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021de:	e00a      	b.n	80021f6 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e0:	f7fe fd32 	bl	8000c48 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	6a3b      	ldr	r3, [r7, #32]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0c7      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f6:	4b68      	ldr	r3, [pc, #416]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 80021f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d0ee      	beq.n	80021e0 <HAL_RCC_OscConfig+0x2e4>
 8002202:	e014      	b.n	800222e <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002204:	f7fe fd20 	bl	8000c48 <HAL_GetTick>
 8002208:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220a:	e00a      	b.n	8002222 <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800220c:	f7fe fd1c 	bl	8000c48 <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	f241 3288 	movw	r2, #5000	; 0x1388
 800221a:	4293      	cmp	r3, r2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0b1      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 8002224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1ee      	bne.n	800220c <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002232:	2b01      	cmp	r3, #1
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002236:	4b58      	ldr	r3, [pc, #352]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a57      	ldr	r2, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 800223c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	2b00      	cmp	r3, #0
 8002248:	f000 809c 	beq.w	8002384 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800224c:	4b52      	ldr	r3, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d061      	beq.n	800231c <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	2b02      	cmp	r3, #2
 800225e:	d146      	bne.n	80022ee <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002260:	4b4e      	ldr	r3, [pc, #312]	; (800239c <HAL_RCC_OscConfig+0x4a0>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002266:	f7fe fcef 	bl	8000c48 <HAL_GetTick>
 800226a:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800226e:	f7fe fceb 	bl	8000c48 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a3b      	ldr	r3, [r7, #32]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b64      	cmp	r3, #100	; 0x64
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e082      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002280:	4b45      	ldr	r3, [pc, #276]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800228c:	4b42      	ldr	r3, [pc, #264]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	4b43      	ldr	r3, [pc, #268]	; (80023a0 <HAL_RCC_OscConfig+0x4a4>)
 8002292:	4013      	ands	r3, r2
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	69d1      	ldr	r1, [r2, #28]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6a12      	ldr	r2, [r2, #32]
 800229c:	4311      	orrs	r1, r2
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022a2:	0192      	lsls	r2, r2, #6
 80022a4:	4311      	orrs	r1, r2
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80022aa:	0612      	lsls	r2, r2, #24
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80022b2:	0852      	lsrs	r2, r2, #1
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0412      	lsls	r2, r2, #16
 80022b8:	430a      	orrs	r2, r1
 80022ba:	4937      	ldr	r1, [pc, #220]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	; (800239c <HAL_RCC_OscConfig+0x4a0>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe fcbf 	bl	8000c48 <HAL_GetTick>
 80022ca:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ce:	f7fe fcbb 	bl	8000c48 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	6a3b      	ldr	r3, [r7, #32]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b64      	cmp	r3, #100	; 0x64
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e052      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x3d2>
 80022ec:	e04a      	b.n	8002384 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b2b      	ldr	r3, [pc, #172]	; (800239c <HAL_RCC_OscConfig+0x4a0>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7fe fca8 	bl	8000c48 <HAL_GetTick>
 80022f8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022fc:	f7fe fca4 	bl	8000c48 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e03b      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b22      	ldr	r3, [pc, #136]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x400>
 800231a:	e033      	b.n	8002384 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e02e      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002328:	4b1b      	ldr	r3, [pc, #108]	; (8002398 <HAL_RCC_OscConfig+0x49c>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	429a      	cmp	r2, r3
 800233a:	d121      	bne.n	8002380 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d11a      	bne.n	8002380 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002356:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002358:	4293      	cmp	r3, r2
 800235a:	d111      	bne.n	8002380 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	085b      	lsrs	r3, r3, #1
 8002368:	3b01      	subs	r3, #1
 800236a:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800236c:	429a      	cmp	r2, r3
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800237a:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3728      	adds	r7, #40	; 0x28
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40007000 	.word	0x40007000
 8002394:	40023870 	.word	0x40023870
 8002398:	40023800 	.word	0x40023800
 800239c:	42470060 	.word	0x42470060
 80023a0:	f0bc8000 	.word	0xf0bc8000

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d2      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b6b      	ldr	r3, [pc, #428]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d90c      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0be      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b5c      	ldr	r3, [pc, #368]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a5b      	ldr	r2, [pc, #364]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80023fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002402:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002410:	4b56      	ldr	r3, [pc, #344]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a55      	ldr	r2, [pc, #340]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002416:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800241a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	4950      	ldr	r1, [pc, #320]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d040      	beq.n	80024bc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b4a      	ldr	r3, [pc, #296]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d115      	bne.n	800247a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e085      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	4b44      	ldr	r3, [pc, #272]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d109      	bne.n	800247a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e079      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246a:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e071      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4939      	ldr	r1, [pc, #228]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002488:	4313      	orrs	r3, r2
 800248a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800248c:	f7fe fbdc 	bl	8000c48 <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002492:	e00a      	b.n	80024aa <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002494:	f7fe fbd8 	bl	8000c48 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e059      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	4b30      	ldr	r3, [pc, #192]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f003 020c 	and.w	r2, r3, #12
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	429a      	cmp	r2, r3
 80024ba:	d1eb      	bne.n	8002494 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024bc:	4b2a      	ldr	r3, [pc, #168]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d20c      	bcs.n	80024e4 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b27      	ldr	r3, [pc, #156]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e03c      	b.n	800255e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d008      	beq.n	8002502 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f0:	4b1e      	ldr	r3, [pc, #120]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	491b      	ldr	r1, [pc, #108]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4913      	ldr	r1, [pc, #76]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002522:	f000 f82b 	bl	800257c <HAL_RCC_GetSysClockFreq>
 8002526:	4601      	mov	r1, r0
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_ClockConfig+0x1c8>)
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002530:	22f0      	movs	r2, #240	; 0xf0
 8002532:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	fa92 f2a2 	rbit	r2, r2
 800253a:	60fa      	str	r2, [r7, #12]
  return result;
 800253c:	68fa      	ldr	r2, [r7, #12]
 800253e:	fab2 f282 	clz	r2, r2
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	40d3      	lsrs	r3, r2
 8002546:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x1cc>)
 8002548:	5cd3      	ldrb	r3, [r2, r3]
 800254a:	fa21 f303 	lsr.w	r3, r1, r3
 800254e:	4a09      	ldr	r2, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x1d0>)
 8002550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002552:	4b09      	ldr	r3, [pc, #36]	; (8002578 <HAL_RCC_ClockConfig+0x1d4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fb34 	bl	8000bc4 <HAL_InitTick>

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	40023c00 	.word	0x40023c00
 800256c:	40023800 	.word	0x40023800
 8002570:	08002804 	.word	0x08002804
 8002574:	20000000 	.word	0x20000000
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800257c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002580:	b094      	sub	sp, #80	; 0x50
 8002582:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	647b      	str	r3, [r7, #68]	; 0x44
 8002588:	2300      	movs	r3, #0
 800258a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800258c:	2300      	movs	r3, #0
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002594:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <HAL_RCC_GetSysClockFreq+0x20c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 030c 	and.w	r3, r3, #12
 800259c:	2b08      	cmp	r3, #8
 800259e:	d00d      	beq.n	80025bc <HAL_RCC_GetSysClockFreq+0x40>
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	f200 80e7 	bhi.w	8002774 <HAL_RCC_GetSysClockFreq+0x1f8>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCC_GetSysClockFreq+0x34>
 80025aa:	2b04      	cmp	r3, #4
 80025ac:	d003      	beq.n	80025b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80025ae:	e0e1      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_RCC_GetSysClockFreq+0x210>)
 80025b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80025b4:	e0e1      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_GetSysClockFreq+0x214>)
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025ba:	e0de      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025bc:	4b72      	ldr	r3, [pc, #456]	; (8002788 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c6:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d065      	beq.n	800269e <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025d2:	4b6d      	ldr	r3, [pc, #436]	; (8002788 <HAL_RCC_GetSysClockFreq+0x20c>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	2200      	movs	r2, #0
 80025da:	63bb      	str	r3, [r7, #56]	; 0x38
 80025dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	633b      	str	r3, [r7, #48]	; 0x30
 80025e6:	2300      	movs	r3, #0
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
 80025ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ee:	4622      	mov	r2, r4
 80025f0:	462b      	mov	r3, r5
 80025f2:	f04f 0000 	mov.w	r0, #0
 80025f6:	f04f 0100 	mov.w	r1, #0
 80025fa:	0159      	lsls	r1, r3, #5
 80025fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002600:	0150      	lsls	r0, r2, #5
 8002602:	4602      	mov	r2, r0
 8002604:	460b      	mov	r3, r1
 8002606:	4621      	mov	r1, r4
 8002608:	1a51      	subs	r1, r2, r1
 800260a:	6139      	str	r1, [r7, #16]
 800260c:	4629      	mov	r1, r5
 800260e:	eb63 0301 	sbc.w	r3, r3, r1
 8002612:	617b      	str	r3, [r7, #20]
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002620:	4659      	mov	r1, fp
 8002622:	018b      	lsls	r3, r1, #6
 8002624:	4651      	mov	r1, sl
 8002626:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262a:	4651      	mov	r1, sl
 800262c:	018a      	lsls	r2, r1, #6
 800262e:	46d4      	mov	ip, sl
 8002630:	ebb2 080c 	subs.w	r8, r2, ip
 8002634:	4659      	mov	r1, fp
 8002636:	eb63 0901 	sbc.w	r9, r3, r1
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800264a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800264e:	4690      	mov	r8, r2
 8002650:	4699      	mov	r9, r3
 8002652:	4623      	mov	r3, r4
 8002654:	eb18 0303 	adds.w	r3, r8, r3
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	462b      	mov	r3, r5
 800265c:	eb49 0303 	adc.w	r3, r9, r3
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800266e:	4629      	mov	r1, r5
 8002670:	024b      	lsls	r3, r1, #9
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	4604      	mov	r4, r0
 8002678:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 800267c:	4601      	mov	r1, r0
 800267e:	024a      	lsls	r2, r1, #9
 8002680:	4610      	mov	r0, r2
 8002682:	4619      	mov	r1, r3
 8002684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002686:	2200      	movs	r2, #0
 8002688:	62bb      	str	r3, [r7, #40]	; 0x28
 800268a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800268c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002690:	f7fd fd98 	bl	80001c4 <__aeabi_uldivmod>
 8002694:	4602      	mov	r2, r0
 8002696:	460b      	mov	r3, r1
 8002698:	4613      	mov	r3, r2
 800269a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800269c:	e05c      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269e:	4b3a      	ldr	r3, [pc, #232]	; (8002788 <HAL_RCC_GetSysClockFreq+0x20c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	099b      	lsrs	r3, r3, #6
 80026a4:	2200      	movs	r2, #0
 80026a6:	4618      	mov	r0, r3
 80026a8:	4611      	mov	r1, r2
 80026aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ae:	623b      	str	r3, [r7, #32]
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
 80026b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80026b8:	4642      	mov	r2, r8
 80026ba:	464b      	mov	r3, r9
 80026bc:	f04f 0000 	mov.w	r0, #0
 80026c0:	f04f 0100 	mov.w	r1, #0
 80026c4:	0159      	lsls	r1, r3, #5
 80026c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026ca:	0150      	lsls	r0, r2, #5
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	46c4      	mov	ip, r8
 80026d2:	ebb2 0a0c 	subs.w	sl, r2, ip
 80026d6:	4640      	mov	r0, r8
 80026d8:	4649      	mov	r1, r9
 80026da:	468c      	mov	ip, r1
 80026dc:	eb63 0b0c 	sbc.w	fp, r3, ip
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	f04f 0300 	mov.w	r3, #0
 80026e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026f4:	ebb2 040a 	subs.w	r4, r2, sl
 80026f8:	eb63 050b 	sbc.w	r5, r3, fp
 80026fc:	f04f 0200 	mov.w	r2, #0
 8002700:	f04f 0300 	mov.w	r3, #0
 8002704:	00eb      	lsls	r3, r5, #3
 8002706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270a:	00e2      	lsls	r2, r4, #3
 800270c:	4614      	mov	r4, r2
 800270e:	461d      	mov	r5, r3
 8002710:	4603      	mov	r3, r0
 8002712:	18e3      	adds	r3, r4, r3
 8002714:	603b      	str	r3, [r7, #0]
 8002716:	460b      	mov	r3, r1
 8002718:	eb45 0303 	adc.w	r3, r5, r3
 800271c:	607b      	str	r3, [r7, #4]
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272a:	4629      	mov	r1, r5
 800272c:	028b      	lsls	r3, r1, #10
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	4604      	mov	r4, r0
 8002734:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8002738:	4601      	mov	r1, r0
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002742:	2200      	movs	r2, #0
 8002744:	61bb      	str	r3, [r7, #24]
 8002746:	61fa      	str	r2, [r7, #28]
 8002748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800274c:	f7fd fd3a 	bl	80001c4 <__aeabi_uldivmod>
 8002750:	4602      	mov	r2, r0
 8002752:	460b      	mov	r3, r1
 8002754:	4613      	mov	r3, r2
 8002756:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_GetSysClockFreq+0x20c>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002768:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800276a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800276c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002770:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b05      	ldr	r3, [pc, #20]	; (800278c <HAL_RCC_GetSysClockFreq+0x210>)
 8002776:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800277c:	4618      	mov	r0, r3
 800277e:	3750      	adds	r7, #80	; 0x50
 8002780:	46bd      	mov	sp, r7
 8002782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002786:	bf00      	nop
 8002788:	40023800 	.word	0x40023800
 800278c:	00f42400 	.word	0x00f42400
 8002790:	007a1200 	.word	0x007a1200

08002794 <memset>:
 8002794:	4603      	mov	r3, r0
 8002796:	4402      	add	r2, r0
 8002798:	4293      	cmp	r3, r2
 800279a:	d100      	bne.n	800279e <memset+0xa>
 800279c:	4770      	bx	lr
 800279e:	f803 1b01 	strb.w	r1, [r3], #1
 80027a2:	e7f9      	b.n	8002798 <memset+0x4>

080027a4 <__libc_init_array>:
 80027a4:	b570      	push	{r4, r5, r6, lr}
 80027a6:	2600      	movs	r6, #0
 80027a8:	4d0c      	ldr	r5, [pc, #48]	; (80027dc <__libc_init_array+0x38>)
 80027aa:	4c0d      	ldr	r4, [pc, #52]	; (80027e0 <__libc_init_array+0x3c>)
 80027ac:	1b64      	subs	r4, r4, r5
 80027ae:	10a4      	asrs	r4, r4, #2
 80027b0:	42a6      	cmp	r6, r4
 80027b2:	d109      	bne.n	80027c8 <__libc_init_array+0x24>
 80027b4:	f000 f81a 	bl	80027ec <_init>
 80027b8:	2600      	movs	r6, #0
 80027ba:	4d0a      	ldr	r5, [pc, #40]	; (80027e4 <__libc_init_array+0x40>)
 80027bc:	4c0a      	ldr	r4, [pc, #40]	; (80027e8 <__libc_init_array+0x44>)
 80027be:	1b64      	subs	r4, r4, r5
 80027c0:	10a4      	asrs	r4, r4, #2
 80027c2:	42a6      	cmp	r6, r4
 80027c4:	d105      	bne.n	80027d2 <__libc_init_array+0x2e>
 80027c6:	bd70      	pop	{r4, r5, r6, pc}
 80027c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80027cc:	4798      	blx	r3
 80027ce:	3601      	adds	r6, #1
 80027d0:	e7ee      	b.n	80027b0 <__libc_init_array+0xc>
 80027d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d6:	4798      	blx	r3
 80027d8:	3601      	adds	r6, #1
 80027da:	e7f2      	b.n	80027c2 <__libc_init_array+0x1e>
 80027dc:	0800281c 	.word	0x0800281c
 80027e0:	0800281c 	.word	0x0800281c
 80027e4:	0800281c 	.word	0x0800281c
 80027e8:	08002820 	.word	0x08002820

080027ec <_init>:
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	bf00      	nop
 80027f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027f2:	bc08      	pop	{r3}
 80027f4:	469e      	mov	lr, r3
 80027f6:	4770      	bx	lr

080027f8 <_fini>:
 80027f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027fa:	bf00      	nop
 80027fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027fe:	bc08      	pop	{r3}
 8002800:	469e      	mov	lr, r3
 8002802:	4770      	bx	lr
